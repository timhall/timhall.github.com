experience:
  - company: Cornerstone Systems NW
    location: Working Remotely
    titles:
    - title: Software Developer
      start_date: May 2013
      end_date: Present
    blurb: 
    details:
    - "Work collaboratively as part of a remote team of developers on a large Backbone.js application, iteratively developing an advanced system that condenses extensive information and tasks into a focused, simple interface"
    - "Methodically update legacy code into maintainable components, including converting an existing native-to-client-side shim from Python to Node.js"
    - "Investigate and resolve bugs, often involving transient or low-level errors, introducing test cases to avoid future regressions and documenting or removing module couplings to reduce unforeseen interactions"
    - "Implement performance improvements such as utilizing caching or incremental updates for slow-running queries and applying asynchronous events to handle blocking or poorly-performing components"
    - "Create composable and configurable d3.chart system that dramatically simplifies the process of creating new chart types (Line, Bars, etc.) and allows rapid iteration of chart design and layout (See [d3.chart.compose](#/projects/d3.chart.compose) for details)"
    - "Craft an asynchronous data layer for working with csv data in d3, including querying, caching, filtering, reducing, formatting, and other advanced behavior"
  - company: Nexant
    location: "Cary, NC"
    titles:
    - title: Project Engineer
      start_date: January 2013
      end_date: May 2013
    - title: Engineer
      start_date: August 2011
      end_date: January 2013
    blurb: 
    details:
    - "Coordinated with a distributed team to lead development of web-based energy auditing tools to modernize existing spreadsheets tools and introduce new offerings, using HTML5, CSS3, Knockout.js and Node.js to quickly build dynamic web applications"
    - "Developed advanced engineering tools and process automation using Excel VBA and leveraging REST APIs (including Salesforce, Trello, and others) to standardize and improve engineering calculations and processing for lighting, HVAC, insulation, and weather. (See [VBA-Web](#/projects/VBA-Web) for details)"
    - "Implment test-driven development framework for customer-facing and internal spreadsheets to reduce product maintenance, allow faster iteration of new features, and ensure accurate energy savings and rebates. (See [Excel-TDD](#/projects/Excel-TDD) for details)"
  - company: University of Maryland - Advanced Manufacturing Lab
    location: "College Park, MD"
    titles:
    - title: Graduate Research Assistant
      start_date: August 2009
      end_date: August 2011
    blurb: 
    details:
    - "Collaborated with a multi-functional product development team on the design of advanced polymer heat exchangers, including establishing and maintaining individual and overall project schedules that ensure continued progress, prioritizing project tasks and goals, and composing technical reports, articles, and presentations"
    - "Developed new mathematical models and software tools that applied machine learning, metamodeling, and image processing for understanding the manufacturability of novel injection-molded fiber-filled polymers that dramatically reduced analysis time and computational resources, are applicable to optimization and design exploration, and maintained minimal error"
    - "Designed experimental analyses that decreased the number of experimental simulations required for design verification, performed injection mold design and machining that balanced design and manufacturing considerations, and standardized microscope imaging and other data collection techniques"

  - company: "Dominion Power, Performance Excellence"
    location: "Richmond, VA"
    titles:
    - title: Engineering Intern
      start_date: May 2008
      end_date: August 2009
    blurb: 
    details:
    - "Developed software applications using Visual Basic and Excel to analyze historical data, identify performance trends, and automatically offer predictions and recommendations for improving efficiency of primary power plant components, including centrifugal pumps, condensers, and turbines. These tools successfully identified critical problems, often weeks or months before they became apparent to plant personnel, and facilitated preventive and required maintenance in order to ensure peak performance"
    - "Created a monthly performance reporting tool which programmatically collected data from a multitude of sources and performed analyses to determine itemized, as well as overall, plant performance and efficiency. This tool considerably expanded the amount and quality of performance data available to power plant management and engineers and was particularly useful for prioritizing process improvements and identifying maintenance issues"
    - "Maintained and updated established analysis tools to utilize modern software, usability, and engineering techniques which significantly improved execution speed, reliability, and ease-of-use"

projects:
  - project: d3.chart.compose
    blurb: |
      (To be released in 2015) Advanced chart layout and composition for [d3.chart](http://misoproject.com/d3-chart/). Was able to quickly create dynamic charts from common chart components for transferring scientific papers to the web. 
    example: |
      ```js
      var chart = d3.select('#id')
        .chart('Compose', function(data) {
          // Prepare data and scales
          var scales = {
            x: {data: data.input, key: 'x'},
            y: {data: data.input, key: 'y'},
            y2: {data: data.output, key: 'y'}
          };

          // Compose chart from Line and Bars charts, with x, y, and y2 axes
          // d3.chart.compose performs layout and wiring
          return {
            charts: {
              bars: {type: 'Bars', data: data.input, xScale: scales.x, yScale: scales.y},
              line: {type: 'Line', data: data.output, xScale: scale.x, yScale: scales.y2}
            },
            axes: {
              x: {scale: scales.x, title: 'Year', position: 'right'},
              y: {scale: scales.y, title: 'Input', position: 'left'},
              y2: {scale: scales.y2, title: 'Output', position: 'right'}
            },
            title: 'Input vs. Output by Year'
          };
        });

      chart.draw({input: [], output: []});
      ```
  - project: VBA-Web
    github:
      user: VBA-tools
      repo: VBA-Web
    blurb: |
      The most-starred VBA project on GitHub (admittedly a dubious honor) that gives structured web queries to Excel, Access, etc. for Windows and Mac (quite an accomplishment, since there was previously no straighforward way of accessing web services on Mac). Extracted from work coordinating Salesforce, Trello, and Ducksboard from Excel.
    example: |
      ```VB.net
      Dim Client As New WebClient
      Client.BaseUrl = "https://api.example.com/"

      Dim Request As New WebRequest
      Request.Resource = "users/123"
      Request.Method = WebMethod.HttpPut
      Request.Format = WebFormat.Json
      Request.AddBodyParameter "key", "value"

      Dim Response As WebResponse
      Set Response = Client.Execute(Request)
      ' -> PUT https://api.example.com/users/123 {"key":"value"}
      '    - JSON conversion and parsing
      '    - GET, POST, PUT, DELETE
      '    - Authentication (Basic, OAuth, etc.)
      '    - and more!
      ```
  - project: knockout.collection
    github:
      user: timhall
      repo: knockout.collection
    blurb: |
      knockout.collection was designed to make it much simpler and more efficient to work with observable arrays in knockout.js. There are two primary issues with working with arrays in knockout.js: 1) Traditional approaches (e.g map or filter) causes the entire DOM that depends on the array to be re-rendered and 2) wiring up listeners for dependencies requires quite a bit of boilerplate and is error-prone. knockout.collection solved these problems and fixed a major pain point in developing a large knockout.js project.
    example: |
      ```js
      var messages = ko.observableArray([
        { id: 1, subject: 'Hi there!', from: 'Friend' },
        { id: 2, subject: 'Something important', from: 'Boss' },
        { id: 3, subject: 'Lunch?', from: 'Friend' },
        { id: 4, subject: 'Get back to work', from: 'Boss' }
      ]);
      var filterBy = ko.observable('Friend');

      var filteredMessages = ko.collection(messages).filter(function (message) {
        return message.from == filterBy();
      });
      // filteredMessages automatically recalculates whenever messages or filterBy changes

      // Features:
      // - filter, map, pluck, and uniq functions observe changes of internal observables
      // - results are patched, making redraws occur only as-needed
      // - results are cached to avoid unneccesary re-evaluations
      ```
  - project: Excel-TDD
    github:
      user: VBA-tools
      repo: Excel-TDD
    blurb: |
      I liked testing with [Jasmine](http://jasmine.github.io/) so much, I ported it to Excel! Extracted from a system for verifying spreadsheets, Excel-TDD improved confidence in introducing new features and reduced critical errors in spreadsheets that were released across the country.
    example: |
      ```VB.net
      Dim Specs As New SpecSuite
      Specs.Description = "Test Workbook"

      ' Cleanup before each spec with "Cleanup" callback
      Specs.BeforeEach "Cleanup"

      With Specs.It("should add two numbers")
         .Expect(Add(2, 2)).ToEqual 4
      End With

      With Specs.It("should test complex things")
        .Expect(ThisWorkbook.Sheets("Hidden").Visible).ToNotEqual _
          XlSheetVisibility.xlSheetVisible
        .Expect(ThisWorkbook.Sheets("Main").Cells(1, 1).Interior.Color).ToEqual _
          RGB(255, 0, 0)
      End With
      ```